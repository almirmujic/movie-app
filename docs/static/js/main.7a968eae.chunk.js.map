{"version":3,"sources":["components/Header.js","components/MovieCard.js","App.js","serviceWorker.js","index.js"],"names":["Table","styled","table","_templateObject","Header","react_default","a","createElement","src","width","height","alt","Card","div","MovieCard_templateObject","Img","img","_templateObject2","Button","button","_templateObject3","MovieCard","_ref","id","imgExtention","bgColor","title","overview","imgProvided","concat","style","backgroundColor","onClick","e","url","window","location","href","FilmInput","input","App_templateObject","API_KEY","process","App","_useState","useState","_useState2","Object","slicedToArray","movies","setMovies","_useState3","_useState4","setInput","useEffect","_fetchData","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","fetch","sent","json","results","t0","console","log","stop","apply","this","arguments","fetchData","bgColors","type","name","placeholder","onChange","target","value","className","paddingLeft","map","key","original_title","poster_path","length","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a968eae.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Table = styled.table`\n  background-color: #081c24;\n  display: block;\n  color: #fff;\n  padding-top: 8px;\n  padding-bottom: 4px;\n  img {\n    padding-left: 16px;\n  }\n  h1 {\n    padding-left: 10px;\n  }\n`;\n\nexport default function Header() {\n  return (\n    <Table>\n      <tbody>\n        <tr>\n          <td>\n            <img\n              src=\"https://www.themoviedb.org/assets/2/v4/logos/primary-green-d70eebe18a5eb5b166d5c1ef0796715b8d1a2cbc698f96d311d62f894ae87085.svg\"\n              width=\"81\"\n              height=\"72\"\n              alt=\"The Movie Database\"\n            />\n          </td>\n          <td>\n            <h1>MoviesDB Search</h1>\n          </td>\n        </tr>\n      </tbody>\n    </Table>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Card = styled.div`\n  display: flex;\n  padding: 1rem;\n  img {\n    width: auto;\n    height: 100%;\n    align-self: center;\n  }\n  div {\n    padding: 1rem;\n    align-self: center;\n  }\n`;\n\nconst Img = styled.img`\n  border-radius: 15px;\n  border: 5px solid #01d277;\n  max-height: 278px;\n`;\n\nconst Button = styled.button`\n  background-color: #01d277;\n  color: #fff;\n  font-size: 20px;\n  border: none;\n  border-radius: 15px;\n  padding: 4px 12px 4px 12px;\n  transition: .3s\n  &:hover {\n    transform: scale(1.1);\n    cursor: pointer;\n  }\n`;\n\nexport default function MovieCard({\n  id,\n  imgExtention,\n  bgColor,\n  title,\n  overview\n}) {\n  const imgUrl = 'https://image.tmdb.org/t/p/w185';\n\n  const onView = e => {\n    const url = 'https://www.themoviedb.org/movie/' + id;\n    window.location.href = url;\n  };\n\n  const imgProvided = imgExtention ? `${imgUrl}/${imgExtention}` : '';\n\n  return (\n    <Card style={{ backgroundColor: `${bgColor}` }}>\n      <Img src={imgProvided} alt={title} />\n      <div>\n        <h2>{title}</h2>\n        <p>{overview}</p>\n        <Button onClick={onView}>View</Button>\n      </div>\n    </Card>\n  );\n}\n\nMovieCard.propTypes = {\n  id: PropTypes.number,\n  title: PropTypes.string,\n  overview: PropTypes.string,\n  imgExtention: PropTypes.string,\n  bgColor: PropTypes.string\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Header from './components/Header';\nimport MovieCard from './components/MovieCard';\n\nimport styled from 'styled-components';\nimport './App.css';\n\nconst FilmInput = styled.input`\n  box-sizing: border-box;\n  display: block;\n  margin: 0;\n  padding: 10px;\n  border: 0;\n  border-bottom: 1px solid lightgrey;\n  font-size: 24px;\n  width: 100%;\n`;\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [input, setInput] = useState('');\n\n  const onChange = e => {\n    setInput(e.target.value);\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        // if statement to prevent error status 422, only fetch if query provided\n        if (input) {\n          let response = await fetch(\n            'https://api.themoviedb.org/3/search/movie?&api_key=' +\n              API_KEY +\n              (input ? '&query=' + input : '')\n          );\n          let data = await response.json();\n          setMovies(data.results);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    fetchData();\n  }, [input]);\n\n  const bgColors = ['#fff', '#F5F5F5'];\n\n  return (\n    <div>\n      <Header />\n      <FilmInput\n        type=\"text\"\n        name=\"input\"\n        placeholder=\"Search for a movie...\"\n        onChange={onChange}\n      />\n      <div className=\"container\">\n        {input === '' ? (\n          <h2 style={{ paddingLeft: '8px' }}>Please search for a movie...</h2>\n        ) : (\n          movies.map(({ original_title, poster_path, overview, id }, key) => (\n            <MovieCard\n              bgColor={bgColors[key % bgColors.length]}\n              key={key}\n              title={original_title}\n              imgExtention={poster_path ? poster_path : ''}\n              overview={overview}\n              id={id}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  input: PropTypes.string,\n  movies: PropTypes.array\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}